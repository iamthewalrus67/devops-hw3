name: Blue/Green Deployment with Tests

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: new-env

    env:
      KUBE_NAMESPACE: default

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Install dependencies and run tests
      run: |
        cd app
        python -m pip install --upgrade pip
        pip install pytest
        pip install -r requirements.txt
        pytest test_hello.py

    - name: Log in to container registry
      run: |
        echo "${{ secrets.REGISTRY_PASSWORD }}" | docker login ${{ secrets.REGISTRY_URL }} -u ${{ secrets.REGISTRY_USERNAME }} --password-stdin

    - name: Build and push Docker image
      run: |
        cd app
        IMAGE_TAG=${{ github.sha }}
        docker build -t ${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_REPO }}:$IMAGE_TAG .
        docker push ${{ secrets.REGISTRY_URL }}/${{ secrets.REGISTRY_REPO }}:$IMAGE_TAG
        echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_ENV

    - name: Log in to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Set up kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'

    - name: Configure kubectl for AKS
      run: az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

    - name: Ensure service exists
      run: |
        kubectl get service my-app || kubectl apply -f k8s/app-v1.yml
    
    - name: Determine active environment
      id: current-color
      run: |
          CURRENT_VERSION=$(kubectl get service my-app -o jsonpath='{.spec.selector.version}')
          echo "CURRENT_VERSION=${CURRENT_VERSION}" >> $GITHUB_ENV

    - name: Deploy new version
      run: |
          if [[ "$CURRENT_VERSION" == "v1.0.0" ]]; then
            sed "s|iamthewalrus67/my-service:latest|${{ secrets.REGISTRY_USERNAME }}/my-service:${{ env.IMAGE_TAG }}|" k8s/app-v2.yml | kubectl apply -f -
            echo "NEW_VERSION=v2" >> $GITHUB_ENV
          else
            sed "s|iamthewalrus67/my-service:latest|${{ secrets.REGISTRY_USERNAME }}/my-service:${{ env.IMAGE_TAG }}|" k8s/app-v1.yml | kubectl apply -f -
            echo "NEW_VERSION=v1" >> $GITHUB_ENV
          fi

    - name: Switch service to new version
      run: |
          kubectl patch service my-app -p '{"spec":{"selector":{"app":"my-app","version":"'"${{ env.NEW_VERSION }}"'"}}}'

    - name: Verify new deployment
      run: kubectl rollout status deployment my-app-${{ env.NEW_VERSION }}

    - name: Cleanup old deployment
      if: always()
      run: |
        if [[ "$CURRENT_VERSION" == "v1.0.0" ]]; then
          kubectl delete deployment my-app-v1 || true
        else
          kubectl delete deployment my-app-v2 || true
        fi
